fn isPrime(n) {
    /> Handle special cases
    if(n <= 1) then {
        return false;
    } end;
    
    if(n <= 3) then {
        return true;
    } end;
    
    /> Check if n is divisible by 2 or 3
    if(n % 2 == 0 || n % 3 == 0) then {
        return false;
    } end;
    
    /> Check all numbers of form 6k Â± 1 up to sqrt(n)
    var i = 5;
    while(i * i <= n) {
        if(n % i == 0 || n % (i + 2) == 0) then {
            return false;
        } end;
        i += 6;
    };
    
    return true;
};

/> Function to find all primes up to n using Sieve of Eratosthenes
fn sieveOfEratosthenes(n) {
    /> Create a boolean array "isPrime[0..n]" and initialize all entries as true
    var isPrime = [];
    for(var i = 0; i <= n; i += 1) {
        isPrime.PushBack(true);
    };
    
    /> Mark 0 and 1 as non-prime
    isPrime[0] = false;
    isPrime[1] = false;
    
    /> Process all numbers from 2 to sqrt(n)
    var p = 2;
    while(p * p <= n) {
        /> If isPrime[p] is not changed, then it is a prime
        if(isPrime[p]) then {
            /> Mark all multiples of p as non-prime
            for(var i = p * p; i <= n; i += p) {
                isPrime[i] = false;
            };
        } end;
        p += 1;
    };
    
    /> Collect all prime numbers
    var primes = [];
    for(var i = 2; i <= n; i += 1) {
        if(isPrime[i]) then {
            primes.PushBack(i);
        } end;
    };
    
    return primes;
};
