fn longest_palindromic_subsequence(arr) {
    var n = arr.Length;
    var dp = [];
    for (var i = 0; i < n; i += 1) {
        var row = [];
        for (var j = 0; j < n; j += 1) {
            row.PushBack(0);
        };
        dp.PushBack(row);
    };

    for (var i = 0; i < n; i += 1) {
        dp[i][i] = 1; /> Every single element is a palindrome of length 1
    };

    
    for (var lengt = 2; lengt <= n; lengt += 1) {
        for (var i = 0; i <= n - lengt; i += 1) {
            var j = i + lengt - 1;
            if arr[i] == arr[j] then
                dp[i][j] = dp[i + 1][j - 1] + 2;
            else
                dp[i][j] = max([dp[i + 1][j], dp[i][j - 1]]);
            end;
        };
    };

    dp[0][n - 1]; /> Return the length of the longest palindromic subsequence
};

var myArray = [1, 2, 3, 2, 1, 4, 1, 2, 3, 2, 1];
displayl "Longest Palindromic Subsequence Length: " + string(longest_palindromic_subsequence(myArray));
var medarr= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];
displayl "Longest Palindromic Subsequence Length: " + string(longest_palindromic_subsequence(medarr));
var longarr = [
    3, 7, 1, 4, 8, 2, 9, 6, 5, 0,
    3, 1, 7, 2, 8, 4, 6, 0, 9, 5,
    1, 3, 2, 7, 4, 8, 5, 0, 6, 9,
    2, 4, 1, 3, 7, 5, 8, 0, 9, 6,
    7, 3, 1, 2, 6, 9, 0, 8, 4, 5,
    5, 4, 8, 0, 9, 6, 2, 1, 3, 7,
    6, 9, 0, 5, 8, 3, 1, 2, 4, 7,
    9, 6, 5, 8, 0, 1, 3, 7, 2, 4,
    0, 5, 6, 9, 8, 3, 7, 2, 1, 4,
    8, 2, 9, 1, 6, 0, 3, 4, 5, 7,
];

displayl "Longest Palindromic Subsequence Length: " + string(longest_palindromic_subsequence(longarr));